@startuml

hide empty description

Title Robot State Flow Diagram

[*] -> Robot #a8e6cf

Robot --> SoftwareSubsystems #dcedc1
state Constants #dcedc1{
  state ShooterConstants #ffd3b6{
    state IndexSpeed
    state ShooterSpeed
    state PIDConstants
  }
  state IntakeConstants #ffd3b6{
    state IntakeSpeed
  }
}
Robot -d-> Constants



SoftwareSubsystems --> DriveBase

State DriveBase #ffd3b6 {
  state YAGSL
  YAGSL --> SwerveModules
  YAGSL : Swerve Library
  state YAGSL {
    SwervePoseEstimator -d-> Odometry
    state Config
  }
  state SwerveModules #lightblue {
    state "FrontLeft" as fl
    state "FrontRight" as fr
    state "BackLeft" as bl
    state "BackRight" as br
    
    state Module #purple {
      state DriveKraken
      state RotationKraken
      state Cancoder
    }
    
    Module <-u- fl
    Module <-u- br
    Module <-u- bl
    Module <-u- fr
    

    state "PIDModuleControl" as drpid
    state drpid {
    
    }
    
    drpid : YAGSL Config
    drpid -u-> RotationKraken
    
    
    
  }

  YAGSL -r-> Navx
  State Navx #lightblue{
    
    State Gyroscope
    State Accelerometer
  }
}

SoftwareSubsystems --> Intake

state Intake #ffd3b6  {
  state IntakeModules #ffaaa5{
      state IntakeCANSpark #orange{
        state IntakeNeo1
        state IntakeNeo2
        state IntakeNeo3
      }
     state LaserCAN
  }
  state IntakeCommands #ffaaa5{
      state Spit
      state RunIntake
      LaserCAN -d-> IntakeNotePresent : boolean
      IntakeNotePresent -> RunIntake : On false
      RunIntake -d-> IntakeNeo1 : runs
      RunIntake -d-> IntakeNeo2 : runs
      RunIntake -d-> IntakeNeo3 : runs
      Spit -d-> IntakeNeo1 : reverse
      Spit -d-> IntakeNeo2 : reverse
      Spit -d-> IntakeNeo3 : reverse
  }
}

SoftwareSubsystems --> Shooter

state Shooter #ffd3b6 {
  state Modules #ffaaa5 {
    state ShooterCANSpark #orange{
      state IndexerNeo550
    }
    state VelocityFalcon
    state AngleFalcon
    state Shooter.Modules.LaserCAN
  }
  state ShooterCommands #ffaaa5 {
    state NotePresent
    state Shoot
    state SetAngle
  } 
  AngleFalcon <-d- SetAngle : PID Loop
  Shooter.Modules.LaserCAN -u-> NotePresent
  ShooterCommands.NotePresent : boolean
  ShooterCommands.NotePresent -> ShooterCommands.NotePresent : Repeat Check Periodically
  ShooterCommands.NotePresent -d-> Shoot : If true + On Button Pressed
  ShooterCommands.Shoot -u-> ShooterCommands.SetAngle
  ShooterCommands.Shoot -u-> Modules.VelocityFalcon : Run Motor
  ShooterCommands.Shoot -u-> Modules.ShooterCANSpark.IndexerNeo550 : Run Motor
}

SoftwareSubsystems --> Climb

state Climb #ffd3b6{
  [*] -d-> ClimbNeo
  ClimbNeo : x2
  
}

SoftwareSubsystems --> Vision
state Vision #ffd3b6 {

 state PhotonVision #teal {
  state "ArducamOV9281" as apcam
  AprilTags <-d- apcam : detects
  AprilTags -d-> distance : gets

  state "ArducamOV2381" as notecam
  Notes <-d- notecam : detects
  state photontracktarget
  state hastargets
  state photonposeestimator
  photonposeestimator--> returnspose
   hastargets --> getsifhastargets
   getsifhastargets --> photontracktarget
  photontracktarget --> getstarget
getstarget -u-> distance
    }
}

Robot --> ElectricalSubsystems #dcedc1

state Indexer #ffd3b6{
    state indexCommands #ffaaa5{
    state indexrun
    }
}

SoftwareSubsystems --> Indexer

Vision.PhotonVision.distance -> Shooter.ShooterCommands.SetAngle : ArcTan(Distance to speaker/Difference between desired height and PhotonVision height)
Constants.ShooterConstants.PIDConstants -> Shooter.Modules.AngleFalcon
Constants.ShooterConstants.ShooterSpeed -> Shooter.Modules.VelocityFalcon
Constants.ShooterConstants.IndexSpeed -> Shooter.Modules.ShooterIndexerNeo550
Constants.IntakeConstants.IntakeSpeed -> Intake.IntakeCommands.RunIntake : Takes in speed
Constants.IntakeConstants.IntakeSpeed -> Intake.IntakeCommands.Spit : Takes in speed


@enduml